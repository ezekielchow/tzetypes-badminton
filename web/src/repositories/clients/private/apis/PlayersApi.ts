/* tslint:disable */
/* eslint-disable */
/**
 * tzetypes-badminton
 * tzetypes-badminton
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddPlayerRequestSchema,
  ListPlayers200Response,
  Player,
  UpdatePlayerWithIdRequest,
} from '../models/index';
import {
    AddPlayerRequestSchemaFromJSON,
    AddPlayerRequestSchemaToJSON,
    ListPlayers200ResponseFromJSON,
    ListPlayers200ResponseToJSON,
    PlayerFromJSON,
    PlayerToJSON,
    UpdatePlayerWithIdRequestFromJSON,
    UpdatePlayerWithIdRequestToJSON,
} from '../models/index';

export interface AddPlayerRequest {
    addPlayerRequestSchema: AddPlayerRequestSchema;
}

export interface GetPlayerWithIdRequest {
    id: string;
}

export interface ListPlayersRequest {
    page: number;
    pageSize: number;
    ownerId?: string;
    sortArrangement?: string;
}

export interface UpdatePlayerWithIdOperationRequest {
    id: string;
    updatePlayerWithIdRequest: UpdatePlayerWithIdRequest;
}

/**
 * 
 */
export class PlayersApi extends runtime.BaseAPI {

    /**
     */
    async addPlayerRaw(requestParameters: AddPlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Player>> {
        if (requestParameters['addPlayerRequestSchema'] == null) {
            throw new runtime.RequiredError(
                'addPlayerRequestSchema',
                'Required parameter "addPlayerRequestSchema" was null or undefined when calling addPlayer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/players/add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddPlayerRequestSchemaToJSON(requestParameters['addPlayerRequestSchema']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerFromJSON(jsonValue));
    }

    /**
     */
    async addPlayer(requestParameters: AddPlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Player> {
        const response = await this.addPlayerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve information about a player using their unique ID.
     * Get a player by ID
     */
    async getPlayerWithIdRaw(requestParameters: GetPlayerWithIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Player>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPlayerWithId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/players/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerFromJSON(jsonValue));
    }

    /**
     * Retrieve information about a player using their unique ID.
     * Get a player by ID
     */
    async getPlayerWithId(requestParameters: GetPlayerWithIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Player> {
        const response = await this.getPlayerWithIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List players
     */
    async listPlayersRaw(requestParameters: ListPlayersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListPlayers200Response>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling listPlayers().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling listPlayers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ownerId'] != null) {
            queryParameters['owner_id'] = requestParameters['ownerId'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sortArrangement'] != null) {
            queryParameters['sortArrangement'] = requestParameters['sortArrangement'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/players`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListPlayers200ResponseFromJSON(jsonValue));
    }

    /**
     * List players
     */
    async listPlayers(requestParameters: ListPlayersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListPlayers200Response> {
        const response = await this.listPlayersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the details of a player using their unique ID.
     * Update a player by ID
     */
    async updatePlayerWithIdRaw(requestParameters: UpdatePlayerWithIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Player>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updatePlayerWithId().'
            );
        }

        if (requestParameters['updatePlayerWithIdRequest'] == null) {
            throw new runtime.RequiredError(
                'updatePlayerWithIdRequest',
                'Required parameter "updatePlayerWithIdRequest" was null or undefined when calling updatePlayerWithId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/players/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePlayerWithIdRequestToJSON(requestParameters['updatePlayerWithIdRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerFromJSON(jsonValue));
    }

    /**
     * Update the details of a player using their unique ID.
     * Update a player by ID
     */
    async updatePlayerWithId(requestParameters: UpdatePlayerWithIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Player> {
        const response = await this.updatePlayerWithIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
