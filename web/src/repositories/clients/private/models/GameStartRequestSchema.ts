/* tslint:disable */
/* eslint-disable */
/**
 * tzetypes-badminton
 * tzetypes-badminton
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface GameStartRequestSchema
 */
export interface GameStartRequestSchema {
    /**
     * 
     * @type {string}
     * @memberof GameStartRequestSchema
     */
    leftOddPlayerName?: string;
    /**
     * 
     * @type {string}
     * @memberof GameStartRequestSchema
     */
    leftEvenPlayerName: string;
    /**
     * 
     * @type {string}
     * @memberof GameStartRequestSchema
     */
    rightOddPlayerName?: string;
    /**
     * 
     * @type {string}
     * @memberof GameStartRequestSchema
     */
    rightEvenPlayerName: string;
    /**
     * 
     * @type {string}
     * @memberof GameStartRequestSchema
     */
    gameType: GameStartRequestSchemaGameTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof GameStartRequestSchema
     */
    servingSide: GameStartRequestSchemaServingSideEnum;
}


/**
 * @export
 */
export const GameStartRequestSchemaGameTypeEnum = {
    Singles: 'singles',
    Doubles: 'doubles'
} as const;
export type GameStartRequestSchemaGameTypeEnum = typeof GameStartRequestSchemaGameTypeEnum[keyof typeof GameStartRequestSchemaGameTypeEnum];

/**
 * @export
 */
export const GameStartRequestSchemaServingSideEnum = {
    LeftEven: 'left_even',
    RightEven: 'right_even'
} as const;
export type GameStartRequestSchemaServingSideEnum = typeof GameStartRequestSchemaServingSideEnum[keyof typeof GameStartRequestSchemaServingSideEnum];


/**
 * Check if a given object implements the GameStartRequestSchema interface.
 */
export function instanceOfGameStartRequestSchema(value: object): value is GameStartRequestSchema {
    if (!('leftEvenPlayerName' in value) || value['leftEvenPlayerName'] === undefined) return false;
    if (!('rightEvenPlayerName' in value) || value['rightEvenPlayerName'] === undefined) return false;
    if (!('gameType' in value) || value['gameType'] === undefined) return false;
    if (!('servingSide' in value) || value['servingSide'] === undefined) return false;
    return true;
}

export function GameStartRequestSchemaFromJSON(json: any): GameStartRequestSchema {
    return GameStartRequestSchemaFromJSONTyped(json, false);
}

export function GameStartRequestSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): GameStartRequestSchema {
    if (json == null) {
        return json;
    }
    return {
        
        'leftOddPlayerName': json['left_odd_player_name'] == null ? undefined : json['left_odd_player_name'],
        'leftEvenPlayerName': json['left_even_player_name'],
        'rightOddPlayerName': json['right_odd_player_name'] == null ? undefined : json['right_odd_player_name'],
        'rightEvenPlayerName': json['right_even_player_name'],
        'gameType': json['game_type'],
        'servingSide': json['serving_side'],
    };
}

export function GameStartRequestSchemaToJSON(value?: GameStartRequestSchema | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'left_odd_player_name': value['leftOddPlayerName'],
        'left_even_player_name': value['leftEvenPlayerName'],
        'right_odd_player_name': value['rightOddPlayerName'],
        'right_even_player_name': value['rightEvenPlayerName'],
        'game_type': value['gameType'],
        'serving_side': value['servingSide'],
    };
}

