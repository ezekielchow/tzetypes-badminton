/* tslint:disable */
/* eslint-disable */
/**
 * tzetypes-badminton
 * tzetypes-badminton
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Game
 */
export interface Game {
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    clubId: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    leftOddPlayerName: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    leftEvenPlayerName: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    rightOddPlayerName: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    rightEvenPlayerName: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    gameType: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    servingSide: string;
    /**
     * 
     * @type {boolean}
     * @memberof Game
     */
    isEnded: boolean;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    updatedAt: string;
}

/**
 * Check if a given object implements the Game interface.
 */
export function instanceOfGame(value: object): value is Game {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('clubId' in value) || value['clubId'] === undefined) return false;
    if (!('leftOddPlayerName' in value) || value['leftOddPlayerName'] === undefined) return false;
    if (!('leftEvenPlayerName' in value) || value['leftEvenPlayerName'] === undefined) return false;
    if (!('rightOddPlayerName' in value) || value['rightOddPlayerName'] === undefined) return false;
    if (!('rightEvenPlayerName' in value) || value['rightEvenPlayerName'] === undefined) return false;
    if (!('gameType' in value) || value['gameType'] === undefined) return false;
    if (!('servingSide' in value) || value['servingSide'] === undefined) return false;
    if (!('isEnded' in value) || value['isEnded'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function GameFromJSON(json: any): Game {
    return GameFromJSONTyped(json, false);
}

export function GameFromJSONTyped(json: any, ignoreDiscriminator: boolean): Game {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'clubId': json['club_id'],
        'leftOddPlayerName': json['left_odd_player_name'],
        'leftEvenPlayerName': json['left_even_player_name'],
        'rightOddPlayerName': json['right_odd_player_name'],
        'rightEvenPlayerName': json['right_even_player_name'],
        'gameType': json['game_type'],
        'servingSide': json['serving_side'],
        'isEnded': json['is_ended'],
        'createdAt': json['created_at'],
        'updatedAt': json['updated_at'],
    };
}

export function GameToJSON(value?: Game | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'club_id': value['clubId'],
        'left_odd_player_name': value['leftOddPlayerName'],
        'left_even_player_name': value['leftEvenPlayerName'],
        'right_odd_player_name': value['rightOddPlayerName'],
        'right_even_player_name': value['rightEvenPlayerName'],
        'game_type': value['gameType'],
        'serving_side': value['servingSide'],
        'is_ended': value['isEnded'],
        'created_at': value['createdAt'],
        'updated_at': value['updatedAt'],
    };
}

