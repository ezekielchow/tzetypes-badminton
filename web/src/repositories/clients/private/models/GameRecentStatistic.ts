/* tslint:disable */
/* eslint-disable */
/**
 * tzetypes-badminton
 * tzetypes-badminton
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface GameRecentStatistic
 */
export interface GameRecentStatistic {
    /**
     * 
     * @type {string}
     * @memberof GameRecentStatistic
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof GameRecentStatistic
     */
    userId: string;
    /**
     * 
     * @type {number}
     * @memberof GameRecentStatistic
     */
    gameCount: number;
    /**
     * 
     * @type {number}
     * @memberof GameRecentStatistic
     */
    wins: number;
    /**
     * 
     * @type {number}
     * @memberof GameRecentStatistic
     */
    losses: number;
    /**
     * 
     * @type {number}
     * @memberof GameRecentStatistic
     */
    totalPoints: number;
    /**
     * 
     * @type {number}
     * @memberof GameRecentStatistic
     */
    pointsWon: number;
    /**
     * 
     * @type {number}
     * @memberof GameRecentStatistic
     */
    averageTimePerPointSeconds: number;
    /**
     * 
     * @type {number}
     * @memberof GameRecentStatistic
     */
    averageTimePerPointWonSeconds: number;
    /**
     * 
     * @type {number}
     * @memberof GameRecentStatistic
     */
    averageTimePerPointLostSeconds: number;
    /**
     * 
     * @type {number}
     * @memberof GameRecentStatistic
     */
    longestRallySeconds: number;
    /**
     * 
     * @type {number}
     * @memberof GameRecentStatistic
     */
    longestRallyIsWon: number;
    /**
     * 
     * @type {number}
     * @memberof GameRecentStatistic
     */
    shortestRallySeconds: number;
    /**
     * 
     * @type {number}
     * @memberof GameRecentStatistic
     */
    shortestRallyIsWon: number;
    /**
     * 
     * @type {string}
     * @memberof GameRecentStatistic
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof GameRecentStatistic
     */
    updatedAt: string;
}

/**
 * Check if a given object implements the GameRecentStatistic interface.
 */
export function instanceOfGameRecentStatistic(value: object): value is GameRecentStatistic {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('gameCount' in value) || value['gameCount'] === undefined) return false;
    if (!('wins' in value) || value['wins'] === undefined) return false;
    if (!('losses' in value) || value['losses'] === undefined) return false;
    if (!('totalPoints' in value) || value['totalPoints'] === undefined) return false;
    if (!('pointsWon' in value) || value['pointsWon'] === undefined) return false;
    if (!('averageTimePerPointSeconds' in value) || value['averageTimePerPointSeconds'] === undefined) return false;
    if (!('averageTimePerPointWonSeconds' in value) || value['averageTimePerPointWonSeconds'] === undefined) return false;
    if (!('averageTimePerPointLostSeconds' in value) || value['averageTimePerPointLostSeconds'] === undefined) return false;
    if (!('longestRallySeconds' in value) || value['longestRallySeconds'] === undefined) return false;
    if (!('longestRallyIsWon' in value) || value['longestRallyIsWon'] === undefined) return false;
    if (!('shortestRallySeconds' in value) || value['shortestRallySeconds'] === undefined) return false;
    if (!('shortestRallyIsWon' in value) || value['shortestRallyIsWon'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function GameRecentStatisticFromJSON(json: any): GameRecentStatistic {
    return GameRecentStatisticFromJSONTyped(json, false);
}

export function GameRecentStatisticFromJSONTyped(json: any, ignoreDiscriminator: boolean): GameRecentStatistic {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'userId': json['user_id'],
        'gameCount': json['game_count'],
        'wins': json['wins'],
        'losses': json['losses'],
        'totalPoints': json['total_points'],
        'pointsWon': json['points_won'],
        'averageTimePerPointSeconds': json['average_time_per_point_seconds'],
        'averageTimePerPointWonSeconds': json['average_time_per_point_won_seconds'],
        'averageTimePerPointLostSeconds': json['average_time_per_point_lost_seconds'],
        'longestRallySeconds': json['longest_rally_seconds'],
        'longestRallyIsWon': json['longest_rally_is_won'],
        'shortestRallySeconds': json['shortest_rally_seconds'],
        'shortestRallyIsWon': json['shortest_rally_is_won'],
        'createdAt': json['created_at'],
        'updatedAt': json['updated_at'],
    };
}

export function GameRecentStatisticToJSON(value?: GameRecentStatistic | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'user_id': value['userId'],
        'game_count': value['gameCount'],
        'wins': value['wins'],
        'losses': value['losses'],
        'total_points': value['totalPoints'],
        'points_won': value['pointsWon'],
        'average_time_per_point_seconds': value['averageTimePerPointSeconds'],
        'average_time_per_point_won_seconds': value['averageTimePerPointWonSeconds'],
        'average_time_per_point_lost_seconds': value['averageTimePerPointLostSeconds'],
        'longest_rally_seconds': value['longestRallySeconds'],
        'longest_rally_is_won': value['longestRallyIsWon'],
        'shortest_rally_seconds': value['shortestRallySeconds'],
        'shortest_rally_is_won': value['shortestRallyIsWon'],
        'created_at': value['createdAt'],
        'updated_at': value['updatedAt'],
    };
}

