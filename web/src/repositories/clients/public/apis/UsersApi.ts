/* tslint:disable */
/* eslint-disable */
/**
 * tzetypes-badminton
 * tzetypes-badminton
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginRequestSchema,
  LoginResponseSchema,
  RefreshTokenResponseSchema,
  SignupRequestSchema,
} from '../models/index';
import {
    LoginRequestSchemaFromJSON,
    LoginRequestSchemaToJSON,
    LoginResponseSchemaFromJSON,
    LoginResponseSchemaToJSON,
    RefreshTokenResponseSchemaFromJSON,
    RefreshTokenResponseSchemaToJSON,
    SignupRequestSchemaFromJSON,
    SignupRequestSchemaToJSON,
} from '../models/index';

export interface LoginRequest {
    loginRequestSchema: LoginRequestSchema;
}

export interface SignupClubOwnerRequest {
    signupRequestSchema: SignupRequestSchema;
}

export interface SignupPlayerRequest {
    signupRequestSchema: SignupRequestSchema;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponseSchema>> {
        if (requestParameters['loginRequestSchema'] == null) {
            throw new runtime.RequiredError(
                'loginRequestSchema',
                'Required parameter "loginRequestSchema" was null or undefined when calling login().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestSchemaToJSON(requestParameters['loginRequestSchema']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseSchemaFromJSON(jsonValue));
    }

    /**
     */
    async login(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponseSchema> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async refreshTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefreshTokenResponseSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/refresh-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefreshTokenResponseSchemaFromJSON(jsonValue));
    }

    /**
     */
    async refreshToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefreshTokenResponseSchema> {
        const response = await this.refreshTokenRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async signupClubOwnerRaw(requestParameters: SignupClubOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['signupRequestSchema'] == null) {
            throw new runtime.RequiredError(
                'signupRequestSchema',
                'Required parameter "signupRequestSchema" was null or undefined when calling signupClubOwner().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/signup-club-owner`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignupRequestSchemaToJSON(requestParameters['signupRequestSchema']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async signupClubOwner(requestParameters: SignupClubOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.signupClubOwnerRaw(requestParameters, initOverrides);
    }

    /**
     */
    async signupPlayerRaw(requestParameters: SignupPlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['signupRequestSchema'] == null) {
            throw new runtime.RequiredError(
                'signupRequestSchema',
                'Required parameter "signupRequestSchema" was null or undefined when calling signupPlayer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/signup-player`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignupRequestSchemaToJSON(requestParameters['signupRequestSchema']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async signupPlayer(requestParameters: SignupPlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.signupPlayerRaw(requestParameters, initOverrides);
    }

}
