openapi: "3.0.0"
info:
  version: 1.0.0
  title: tzetypes-badminton
  description: tzetypes-badminton
  contact:
    name: ezekiel
    url: https://github.com/ezekielchow
servers:
  - url: https://{hostname}/api
    variables:
      hostname:
        default: localhost
security:
  - BearerAuth: []
paths:
  /dashboard:
    get:
      operationId: dashboard
      responses:
        "204":
          description: dashboard success
        default:
          $ref: "#/components/responses/ErrorResponseSchema"

  /logout:
    get:
      operationId: logout
      tags:
        - users
      responses:
        "204":
          description: logout success
        default:
          $ref: "#/components/responses/ErrorResponseSchema"

  /players/{id}:
    get:
      summary: Get a player by ID
      operationId: getPlayerWithId
      description: Retrieve information about a player using their unique ID.
      tags:
        - players
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the player
          schema:
            type: string
      responses:
        "200":
          description: Successful retrieval of player data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Player"
        default:
          $ref: "#/components/responses/ErrorResponseSchema"
    put:
      summary: Update a player by ID
      operationId: updatePlayerWithId
      description: Update the details of a player using their unique ID.
      tags:
        - players
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the player
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Doe"
              required:
                - name
      responses:
        "200":
          description: Player successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Player"

  /players:
    get:
      summary: List players
      operationId: listPlayers
      tags:
        - players
      parameters:
        - name: owner_id
          in: query
          required: false
          description: The ID of the owner to filter players.
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: The page number for pagination.
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          required: true
          description: The number of players per page.
          schema:
            type: integer
            default: 10
        - name: sortArrangement
          in: query
          required: false
          description: sort by and direction.
          schema:
            type: string
      responses:
        "200":
          description: A list of players
          content:
            application/json:
              schema:
                type: object
                properties:
                  players:
                    type: array
                    items:
                      $ref: "#/components/schemas/Player"
                  pagination:
                    type: object
                    required:
                      - totalItems
                      - totalPages
                      - currentPage
                      - pageSize
                    properties:
                      totalItems:
                        type: integer
                      totalPages:
                        type: integer
                      currentPage:
                        type: integer
                      pageSize:
                        type: integer

  /players/add:
    post:
      operationId: add player
      tags:
        - players
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddPlayerRequestSchema"
      responses:
        "201":
          description: add player success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Player"
        default:
          $ref: "#/components/responses/ErrorResponseSchema"

  /game/{id}/steps:
    post:
      operationId: addGameSteps
      tags:
        - game
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the game
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddGameStepsRequestSchema"
      responses:
        "201":
          description: sync steps successful
          content:
            application/json:
              schema:
                required:
                  - game_steps
                type: object
                properties:
                  game_steps:
                    type: array
                    items:
                      $ref: "#/components/schemas/GameStep"
        default:
          $ref: "#/components/responses/ErrorResponseSchema"

  /game/{game_id}/steps:
    delete:
      operationId: deleteGameSteps
      tags:
        - game
      parameters:
        - name: game_id
          in: path
          required: true
          description: The unique identifier of the game
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "200":
          description: delete steps successful
        default:
          $ref: "#/components/responses/ErrorResponseSchema"

  /game/{game_id}/end:
    patch:
      summary: End game by setting 'isEnded' to 'true'
      operationId: endGame
      tags:
        - game
      parameters:
        - in: path
          name: game_id
          required: true
          description: The unique identifier of the game
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                isEnded:
                  type: boolean
                  example: true
      responses:
        "200":
          description: Game ended successfully
        default:
          $ref: "#/components/responses/ErrorResponseSchema"

  /game:
    post:
      operationId: start game
      tags:
        - game
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GameStartRequestSchema"
      responses:
        "201":
          description: game start successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - steps
                  - game
                properties:
                  steps:
                    type: array
                    items:
                      $ref: "#/components/schemas/GameStep"
                  game:
                    $ref: "#/components/schemas/Game"
        default:
          $ref: "#/components/responses/ErrorResponseSchema"

  /users/current:
    get:
      operationId: get logged in user # Corrected Typo
      tags:
        - users
      responses:
        "200":
          description: get user success
          $ref: "#/components/responses/CurrentUserResponseSchema"
        default:
          $ref: "#/components/responses/ErrorResponseSchema"

components:
  securitySchemes: # Added missing security scheme
    BearerAuth:
      type: http
      scheme: bearer

  schemas:
    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string

    AddPlayerRequestSchema:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    AddGameStepsRequestSchema:
      type: object
      required:
        - steps
      properties:
        steps:
          type: array
          items:
            $ref: "#/components/schemas/GameStep"

    GameStartRequestSchema:
      type: object
      required:
        - left_even_player_name
        - right_even_player_name
        - game_type
        - serving_side
      properties:
        left_odd_player_name:
          type: string
        left_even_player_name:
          type: string
        right_odd_player_name:
          type: string
        right_even_player_name:
          type: string
        game_type:
          type: string
          enum:
            - singles
            - doubles
        serving_side:
          type: string
          enum:
            - left_even
            - right_even

    User:
      type: object
      required:
        - id
        - email
        - created_at
        - updated_at
      properties:
        id:
          type: string
        email:
          type: string
        created_at:
          type: string
        updated_at:
          type: string

    Game:
      type: object
      required:
        - id
        - club_id
        - left_odd_player_name
        - left_even_player_name
        - right_odd_player_name
        - right_even_player_name
        - game_type
        - serving_side
        - is_ended
        - created_at
        - updated_at
      properties:
        id:
          type: string
        club_id:
          type: string
        left_odd_player_name:
          type: string
        left_even_player_name:
          type: string
        right_odd_player_name:
          type: string
        right_even_player_name:
          type: string
        game_type:
          type: string
        serving_side:
          type: string
        is_ended:
          type: boolean
        created_at:
          type: string
        updated_at:
          type: string

    GameStep:
      type: object
      required:
        - id
        - game_id
        - team_left_score
        - team_right_score
        - score_at
        - step_num
        - current_server
        - left_odd_player_name
        - left_even_player_name
        - right_odd_player_name
        - right_even_player_name
        - created_at
        - updated_at
      properties:
        id:
          type: string
        game_id:
          type: string
        team_left_score:
          type: integer
        team_right_score:
          type: integer
        score_at:
          type: string
        step_num:
          type: integer
        current_server:
          type: string
        left_odd_player_name:
          type: string
        left_even_player_name:
          type: string
        right_odd_player_name:
          type: string
        right_even_player_name:
          type: string
        sync_id:
          type: string
        created_at:
          type: string
        updated_at:
          type: string

    Player:
      type: object
      required:
        - id
        - user_id
        - name
        - created_at
        - updated_at
      properties:
        id:
          type: string
          description: The unique identifier for the player.
        user_id:
          type: string
          description: The unique identifier for the player's user.
        name:
          type: string
          description: The name of the player.
        created_at:
          type: string
        updated_at:
          type: string

  responses:
    ErrorResponseSchema:
      description: Error res
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    CurrentUserResponseSchema:
      description: current user success
      content:
        application/json:
          schema:
            type: object
            required:
              - user
            properties:
              user:
                $ref: "#/components/schemas/User"
