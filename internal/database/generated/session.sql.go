// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: session.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
  user_id,session_token_expires_at,refresh_token_expires_at
) VALUES (
  $1,$2,$3
) RETURNING id, user_id, session_token, refresh_token, session_token_expires_at, refresh_token_expires_at, created_at, updated_at
`

type CreateSessionParams struct {
	UserID                pgtype.UUID
	SessionTokenExpiresAt pgtype.Timestamp
	RefreshTokenExpiresAt pgtype.Timestamp
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession, arg.UserID, arg.SessionTokenExpiresAt, arg.RefreshTokenExpiresAt)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.RefreshToken,
		&i.SessionTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE from sessions WHERE id=$1
`

func (q *Queries) DeleteSession(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const findSessionWithRefreshToken = `-- name: FindSessionWithRefreshToken :one
SELECT id, user_id, session_token, refresh_token, session_token_expires_at, refresh_token_expires_at, created_at, updated_at FROM sessions WHERE refresh_token=$1
`

func (q *Queries) FindSessionWithRefreshToken(ctx context.Context, refreshToken pgtype.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, findSessionWithRefreshToken, refreshToken)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.RefreshToken,
		&i.SessionTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findSessionWithSessionID = `-- name: FindSessionWithSessionID :one
SELECT id, user_id, session_token, refresh_token, session_token_expires_at, refresh_token_expires_at, created_at, updated_at FROM sessions WHERE session_token=$1
`

func (q *Queries) FindSessionWithSessionID(ctx context.Context, sessionToken pgtype.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, findSessionWithSessionID, sessionToken)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.RefreshToken,
		&i.SessionTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSessionWithRefreshToken = `-- name: UpdateSessionWithRefreshToken :one
UPDATE sessions
SET session_token = gen_random_uuid(), session_token_expires_at=$2, updated_at=now() 
WHERE refresh_token=$1
RETURNING id, user_id, session_token, refresh_token, session_token_expires_at, refresh_token_expires_at, created_at, updated_at
`

type UpdateSessionWithRefreshTokenParams struct {
	RefreshToken          pgtype.UUID
	SessionTokenExpiresAt pgtype.Timestamp
}

func (q *Queries) UpdateSessionWithRefreshToken(ctx context.Context, arg UpdateSessionWithRefreshTokenParams) (Session, error) {
	row := q.db.QueryRow(ctx, updateSessionWithRefreshToken, arg.RefreshToken, arg.SessionTokenExpiresAt)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.RefreshToken,
		&i.SessionTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
