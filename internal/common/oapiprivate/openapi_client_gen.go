// Package oapiprivate provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapiprivate

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Dashboard request
	Dashboard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartGameWithBody request with any body
	StartGameWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StartGame(ctx context.Context, body StartGameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndGameWithBody request with any body
	EndGameWithBody(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndGame(ctx context.Context, gameId string, body EndGameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGameHistory request
	GetGameHistory(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrUpdateGameHistoryWithBody request with any body
	CreateOrUpdateGameHistoryWithBody(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrUpdateGameHistory(ctx context.Context, gameId string, body CreateOrUpdateGameHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddGameStepsWithBody request with any body
	AddGameStepsWithBody(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddGameSteps(ctx context.Context, gameId string, body AddGameStepsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGameStepsWithBody request with any body
	DeleteGameStepsWithBody(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteGameSteps(ctx context.Context, gameId string, body DeleteGameStepsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Logout request
	Logout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPlayers request
	ListPlayers(ctx context.Context, params *ListPlayersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddPlayerWithBody request with any body
	AddPlayerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddPlayer(ctx context.Context, body AddPlayerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlayerWithId request
	GetPlayerWithId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlayerWithIdWithBody request with any body
	UpdatePlayerWithIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePlayerWithId(ctx context.Context, id string, body UpdatePlayerWithIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLoggedInUser request
	GetLoggedInUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Dashboard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDashboardRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartGameWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartGameRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartGame(ctx context.Context, body StartGameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartGameRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndGameWithBody(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndGameRequestWithBody(c.Server, gameId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndGame(ctx context.Context, gameId string, body EndGameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndGameRequest(c.Server, gameId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGameHistory(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGameHistoryRequest(c.Server, gameId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateGameHistoryWithBody(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateGameHistoryRequestWithBody(c.Server, gameId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateGameHistory(ctx context.Context, gameId string, body CreateOrUpdateGameHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateGameHistoryRequest(c.Server, gameId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddGameStepsWithBody(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddGameStepsRequestWithBody(c.Server, gameId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddGameSteps(ctx context.Context, gameId string, body AddGameStepsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddGameStepsRequest(c.Server, gameId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGameStepsWithBody(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGameStepsRequestWithBody(c.Server, gameId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGameSteps(ctx context.Context, gameId string, body DeleteGameStepsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGameStepsRequest(c.Server, gameId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Logout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogoutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPlayers(ctx context.Context, params *ListPlayersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPlayersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPlayerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPlayerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPlayer(ctx context.Context, body AddPlayerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPlayerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlayerWithId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlayerWithIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlayerWithIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlayerWithIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlayerWithId(ctx context.Context, id string, body UpdatePlayerWithIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlayerWithIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLoggedInUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLoggedInUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDashboardRequest generates requests for Dashboard
func NewDashboardRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartGameRequest calls the generic StartGame builder with application/json body
func NewStartGameRequest(server string, body StartGameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStartGameRequestWithBody(server, "application/json", bodyReader)
}

// NewStartGameRequestWithBody generates requests for StartGame with any type of body
func NewStartGameRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/game")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEndGameRequest calls the generic EndGame builder with application/json body
func NewEndGameRequest(server string, gameId string, body EndGameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEndGameRequestWithBody(server, gameId, "application/json", bodyReader)
}

// NewEndGameRequestWithBody generates requests for EndGame with any type of body
func NewEndGameRequestWithBody(server string, gameId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_id", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/game/%s/end", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGameHistoryRequest generates requests for GetGameHistory
func NewGetGameHistoryRequest(server string, gameId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_id", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/game/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrUpdateGameHistoryRequest calls the generic CreateOrUpdateGameHistory builder with application/json body
func NewCreateOrUpdateGameHistoryRequest(server string, gameId string, body CreateOrUpdateGameHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrUpdateGameHistoryRequestWithBody(server, gameId, "application/json", bodyReader)
}

// NewCreateOrUpdateGameHistoryRequestWithBody generates requests for CreateOrUpdateGameHistory with any type of body
func NewCreateOrUpdateGameHistoryRequestWithBody(server string, gameId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_id", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/game/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddGameStepsRequest calls the generic AddGameSteps builder with application/json body
func NewAddGameStepsRequest(server string, gameId string, body AddGameStepsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddGameStepsRequestWithBody(server, gameId, "application/json", bodyReader)
}

// NewAddGameStepsRequestWithBody generates requests for AddGameSteps with any type of body
func NewAddGameStepsRequestWithBody(server string, gameId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_id", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/game/%s/steps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGameStepsRequest calls the generic DeleteGameSteps builder with application/json body
func NewDeleteGameStepsRequest(server string, gameId string, body DeleteGameStepsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteGameStepsRequestWithBody(server, gameId, "application/json", bodyReader)
}

// NewDeleteGameStepsRequestWithBody generates requests for DeleteGameSteps with any type of body
func NewDeleteGameStepsRequestWithBody(server string, gameId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_id", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/game/%s/steps/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLogoutRequest generates requests for Logout
func NewLogoutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPlayersRequest generates requests for ListPlayers
func NewListPlayersRequest(server string, params *ListPlayersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/players")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OwnerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner_id", runtime.ParamLocationQuery, *params.OwnerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SortArrangement != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortArrangement", runtime.ParamLocationQuery, *params.SortArrangement); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddPlayerRequest calls the generic AddPlayer builder with application/json body
func NewAddPlayerRequest(server string, body AddPlayerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddPlayerRequestWithBody(server, "application/json", bodyReader)
}

// NewAddPlayerRequestWithBody generates requests for AddPlayer with any type of body
func NewAddPlayerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/players/add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlayerWithIdRequest generates requests for GetPlayerWithId
func NewGetPlayerWithIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/players/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlayerWithIdRequest calls the generic UpdatePlayerWithId builder with application/json body
func NewUpdatePlayerWithIdRequest(server string, id string, body UpdatePlayerWithIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePlayerWithIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdatePlayerWithIdRequestWithBody generates requests for UpdatePlayerWithId with any type of body
func NewUpdatePlayerWithIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/players/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLoggedInUserRequest generates requests for GetLoggedInUser
func NewGetLoggedInUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/current")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DashboardWithResponse request
	DashboardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DashboardResponse, error)

	// StartGameWithBodyWithResponse request with any body
	StartGameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartGameResponse, error)

	StartGameWithResponse(ctx context.Context, body StartGameJSONRequestBody, reqEditors ...RequestEditorFn) (*StartGameResponse, error)

	// EndGameWithBodyWithResponse request with any body
	EndGameWithBodyWithResponse(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndGameResponse, error)

	EndGameWithResponse(ctx context.Context, gameId string, body EndGameJSONRequestBody, reqEditors ...RequestEditorFn) (*EndGameResponse, error)

	// GetGameHistoryWithResponse request
	GetGameHistoryWithResponse(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*GetGameHistoryResponse, error)

	// CreateOrUpdateGameHistoryWithBodyWithResponse request with any body
	CreateOrUpdateGameHistoryWithBodyWithResponse(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateGameHistoryResponse, error)

	CreateOrUpdateGameHistoryWithResponse(ctx context.Context, gameId string, body CreateOrUpdateGameHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateGameHistoryResponse, error)

	// AddGameStepsWithBodyWithResponse request with any body
	AddGameStepsWithBodyWithResponse(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddGameStepsResponse, error)

	AddGameStepsWithResponse(ctx context.Context, gameId string, body AddGameStepsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddGameStepsResponse, error)

	// DeleteGameStepsWithBodyWithResponse request with any body
	DeleteGameStepsWithBodyWithResponse(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteGameStepsResponse, error)

	DeleteGameStepsWithResponse(ctx context.Context, gameId string, body DeleteGameStepsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteGameStepsResponse, error)

	// LogoutWithResponse request
	LogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogoutResponse, error)

	// ListPlayersWithResponse request
	ListPlayersWithResponse(ctx context.Context, params *ListPlayersParams, reqEditors ...RequestEditorFn) (*ListPlayersResponse, error)

	// AddPlayerWithBodyWithResponse request with any body
	AddPlayerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPlayerResponse, error)

	AddPlayerWithResponse(ctx context.Context, body AddPlayerJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPlayerResponse, error)

	// GetPlayerWithIdWithResponse request
	GetPlayerWithIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlayerWithIdResponse, error)

	// UpdatePlayerWithIdWithBodyWithResponse request with any body
	UpdatePlayerWithIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlayerWithIdResponse, error)

	UpdatePlayerWithIdWithResponse(ctx context.Context, id string, body UpdatePlayerWithIdJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlayerWithIdResponse, error)

	// GetLoggedInUserWithResponse request
	GetLoggedInUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLoggedInUserResponse, error)
}

type DashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorResponseSchema
}

// Status returns HTTPResponse.Status
func (r DashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartGameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *StartGame201ResponseSchema
	JSONDefault  *ErrorResponseSchema
}

// Status returns HTTPResponse.Status
func (r StartGameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartGameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndGameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorResponseSchema
}

// Status returns HTTPResponse.Status
func (r EndGameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndGameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGameHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetGameHistoryResponseSchema
	JSONDefault  *ErrorResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetGameHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGameHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrUpdateGameHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateOrUpdateGameHistoryResponseSchema
	JSONDefault  *ErrorResponseSchema
}

// Status returns HTTPResponse.Status
func (r CreateOrUpdateGameHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrUpdateGameHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddGameStepsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		GameSteps []GameStep `json:"game_steps"`
	}
	JSONDefault *ErrorResponseSchema
}

// Status returns HTTPResponse.Status
func (r AddGameStepsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddGameStepsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGameStepsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorResponseSchema
}

// Status returns HTTPResponse.Status
func (r DeleteGameStepsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGameStepsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorResponseSchema
}

// Status returns HTTPResponse.Status
func (r LogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPlayersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			CurrentPage int `json:"currentPage"`
			PageSize    int `json:"pageSize"`
			TotalItems  int `json:"totalItems"`
			TotalPages  int `json:"totalPages"`
		} `json:"pagination,omitempty"`
		Players *[]Player `json:"players,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListPlayersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPlayersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddPlayerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Player
	JSONDefault  *ErrorResponseSchema
}

// Status returns HTTPResponse.Status
func (r AddPlayerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddPlayerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlayerWithIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Player
	JSONDefault  *ErrorResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetPlayerWithIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlayerWithIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlayerWithIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Player
}

// Status returns HTTPResponse.Status
func (r UpdatePlayerWithIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlayerWithIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLoggedInUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CurrentUserResponseSchema
	JSONDefault  *ErrorResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetLoggedInUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLoggedInUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DashboardWithResponse request returning *DashboardResponse
func (c *ClientWithResponses) DashboardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DashboardResponse, error) {
	rsp, err := c.Dashboard(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDashboardResponse(rsp)
}

// StartGameWithBodyWithResponse request with arbitrary body returning *StartGameResponse
func (c *ClientWithResponses) StartGameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartGameResponse, error) {
	rsp, err := c.StartGameWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartGameResponse(rsp)
}

func (c *ClientWithResponses) StartGameWithResponse(ctx context.Context, body StartGameJSONRequestBody, reqEditors ...RequestEditorFn) (*StartGameResponse, error) {
	rsp, err := c.StartGame(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartGameResponse(rsp)
}

// EndGameWithBodyWithResponse request with arbitrary body returning *EndGameResponse
func (c *ClientWithResponses) EndGameWithBodyWithResponse(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndGameResponse, error) {
	rsp, err := c.EndGameWithBody(ctx, gameId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndGameResponse(rsp)
}

func (c *ClientWithResponses) EndGameWithResponse(ctx context.Context, gameId string, body EndGameJSONRequestBody, reqEditors ...RequestEditorFn) (*EndGameResponse, error) {
	rsp, err := c.EndGame(ctx, gameId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndGameResponse(rsp)
}

// GetGameHistoryWithResponse request returning *GetGameHistoryResponse
func (c *ClientWithResponses) GetGameHistoryWithResponse(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*GetGameHistoryResponse, error) {
	rsp, err := c.GetGameHistory(ctx, gameId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGameHistoryResponse(rsp)
}

// CreateOrUpdateGameHistoryWithBodyWithResponse request with arbitrary body returning *CreateOrUpdateGameHistoryResponse
func (c *ClientWithResponses) CreateOrUpdateGameHistoryWithBodyWithResponse(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateGameHistoryResponse, error) {
	rsp, err := c.CreateOrUpdateGameHistoryWithBody(ctx, gameId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateGameHistoryResponse(rsp)
}

func (c *ClientWithResponses) CreateOrUpdateGameHistoryWithResponse(ctx context.Context, gameId string, body CreateOrUpdateGameHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateGameHistoryResponse, error) {
	rsp, err := c.CreateOrUpdateGameHistory(ctx, gameId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateGameHistoryResponse(rsp)
}

// AddGameStepsWithBodyWithResponse request with arbitrary body returning *AddGameStepsResponse
func (c *ClientWithResponses) AddGameStepsWithBodyWithResponse(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddGameStepsResponse, error) {
	rsp, err := c.AddGameStepsWithBody(ctx, gameId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddGameStepsResponse(rsp)
}

func (c *ClientWithResponses) AddGameStepsWithResponse(ctx context.Context, gameId string, body AddGameStepsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddGameStepsResponse, error) {
	rsp, err := c.AddGameSteps(ctx, gameId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddGameStepsResponse(rsp)
}

// DeleteGameStepsWithBodyWithResponse request with arbitrary body returning *DeleteGameStepsResponse
func (c *ClientWithResponses) DeleteGameStepsWithBodyWithResponse(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteGameStepsResponse, error) {
	rsp, err := c.DeleteGameStepsWithBody(ctx, gameId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGameStepsResponse(rsp)
}

func (c *ClientWithResponses) DeleteGameStepsWithResponse(ctx context.Context, gameId string, body DeleteGameStepsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteGameStepsResponse, error) {
	rsp, err := c.DeleteGameSteps(ctx, gameId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGameStepsResponse(rsp)
}

// LogoutWithResponse request returning *LogoutResponse
func (c *ClientWithResponses) LogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogoutResponse, error) {
	rsp, err := c.Logout(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogoutResponse(rsp)
}

// ListPlayersWithResponse request returning *ListPlayersResponse
func (c *ClientWithResponses) ListPlayersWithResponse(ctx context.Context, params *ListPlayersParams, reqEditors ...RequestEditorFn) (*ListPlayersResponse, error) {
	rsp, err := c.ListPlayers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPlayersResponse(rsp)
}

// AddPlayerWithBodyWithResponse request with arbitrary body returning *AddPlayerResponse
func (c *ClientWithResponses) AddPlayerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPlayerResponse, error) {
	rsp, err := c.AddPlayerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPlayerResponse(rsp)
}

func (c *ClientWithResponses) AddPlayerWithResponse(ctx context.Context, body AddPlayerJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPlayerResponse, error) {
	rsp, err := c.AddPlayer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPlayerResponse(rsp)
}

// GetPlayerWithIdWithResponse request returning *GetPlayerWithIdResponse
func (c *ClientWithResponses) GetPlayerWithIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlayerWithIdResponse, error) {
	rsp, err := c.GetPlayerWithId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlayerWithIdResponse(rsp)
}

// UpdatePlayerWithIdWithBodyWithResponse request with arbitrary body returning *UpdatePlayerWithIdResponse
func (c *ClientWithResponses) UpdatePlayerWithIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlayerWithIdResponse, error) {
	rsp, err := c.UpdatePlayerWithIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlayerWithIdResponse(rsp)
}

func (c *ClientWithResponses) UpdatePlayerWithIdWithResponse(ctx context.Context, id string, body UpdatePlayerWithIdJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlayerWithIdResponse, error) {
	rsp, err := c.UpdatePlayerWithId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlayerWithIdResponse(rsp)
}

// GetLoggedInUserWithResponse request returning *GetLoggedInUserResponse
func (c *ClientWithResponses) GetLoggedInUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLoggedInUserResponse, error) {
	rsp, err := c.GetLoggedInUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLoggedInUserResponse(rsp)
}

// ParseDashboardResponse parses an HTTP response from a DashboardWithResponse call
func ParseDashboardResponse(rsp *http.Response) (*DashboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseStartGameResponse parses an HTTP response from a StartGameWithResponse call
func ParseStartGameResponse(rsp *http.Response) (*StartGameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartGameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest StartGame201ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEndGameResponse parses an HTTP response from a EndGameWithResponse call
func ParseEndGameResponse(rsp *http.Response) (*EndGameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndGameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGameHistoryResponse parses an HTTP response from a GetGameHistoryWithResponse call
func ParseGetGameHistoryResponse(rsp *http.Response) (*GetGameHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGameHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetGameHistoryResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateOrUpdateGameHistoryResponse parses an HTTP response from a CreateOrUpdateGameHistoryWithResponse call
func ParseCreateOrUpdateGameHistoryResponse(rsp *http.Response) (*CreateOrUpdateGameHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrUpdateGameHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateOrUpdateGameHistoryResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAddGameStepsResponse parses an HTTP response from a AddGameStepsWithResponse call
func ParseAddGameStepsResponse(rsp *http.Response) (*AddGameStepsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddGameStepsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			GameSteps []GameStep `json:"game_steps"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteGameStepsResponse parses an HTTP response from a DeleteGameStepsWithResponse call
func ParseDeleteGameStepsResponse(rsp *http.Response) (*DeleteGameStepsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGameStepsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseLogoutResponse parses an HTTP response from a LogoutWithResponse call
func ParseLogoutResponse(rsp *http.Response) (*LogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListPlayersResponse parses an HTTP response from a ListPlayersWithResponse call
func ParseListPlayersResponse(rsp *http.Response) (*ListPlayersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPlayersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				CurrentPage int `json:"currentPage"`
				PageSize    int `json:"pageSize"`
				TotalItems  int `json:"totalItems"`
				TotalPages  int `json:"totalPages"`
			} `json:"pagination,omitempty"`
			Players *[]Player `json:"players,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddPlayerResponse parses an HTTP response from a AddPlayerWithResponse call
func ParseAddPlayerResponse(rsp *http.Response) (*AddPlayerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddPlayerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Player
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPlayerWithIdResponse parses an HTTP response from a GetPlayerWithIdWithResponse call
func ParseGetPlayerWithIdResponse(rsp *http.Response) (*GetPlayerWithIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlayerWithIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Player
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdatePlayerWithIdResponse parses an HTTP response from a UpdatePlayerWithIdWithResponse call
func ParseUpdatePlayerWithIdResponse(rsp *http.Response) (*UpdatePlayerWithIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlayerWithIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Player
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetLoggedInUserResponse parses an HTTP response from a GetLoggedInUserWithResponse call
func ParseGetLoggedInUserResponse(rsp *http.Response) (*GetLoggedInUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLoggedInUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CurrentUserResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
