// Package oapipublic provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapipublic

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// End games which are abandoned after a time
	// (GET /end-abandoned-games)
	EndAbandonedGames(w http.ResponseWriter, r *http.Request)
	// Get game and steps given id
	// (GET /game/{game_id})
	GetGame(w http.ResponseWriter, r *http.Request, gameId string)
	// Generate statistics for players that has latest game in timespan
	// (GET /generate-recent-statistics)
	GenerateRecentStatistics(w http.ResponseWriter, r *http.Request)

	// (POST /login)
	Login(w http.ResponseWriter, r *http.Request)

	// (POST /refresh-token)
	RefreshToken(w http.ResponseWriter, r *http.Request)

	// (POST /signup-club-owner)
	SignupClubOwner(w http.ResponseWriter, r *http.Request)

	// (POST /signup-player)
	SignupPlayer(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// End games which are abandoned after a time
// (GET /end-abandoned-games)
func (_ Unimplemented) EndAbandonedGames(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get game and steps given id
// (GET /game/{game_id})
func (_ Unimplemented) GetGame(w http.ResponseWriter, r *http.Request, gameId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Generate statistics for players that has latest game in timespan
// (GET /generate-recent-statistics)
func (_ Unimplemented) GenerateRecentStatistics(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /login)
func (_ Unimplemented) Login(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /refresh-token)
func (_ Unimplemented) RefreshToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /signup-club-owner)
func (_ Unimplemented) SignupClubOwner(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /signup-player)
func (_ Unimplemented) SignupPlayer(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// EndAbandonedGames operation middleware
func (siw *ServerInterfaceWrapper) EndAbandonedGames(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.EndAbandonedGames(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetGame operation middleware
func (siw *ServerInterfaceWrapper) GetGame(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "game_id" -------------
	var gameId string

	err = runtime.BindStyledParameterWithOptions("simple", "game_id", chi.URLParam(r, "game_id"), &gameId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "game_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGame(w, r, gameId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GenerateRecentStatistics operation middleware
func (siw *ServerInterfaceWrapper) GenerateRecentStatistics(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GenerateRecentStatistics(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RefreshToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshToken(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RefreshToken(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SignupClubOwner operation middleware
func (siw *ServerInterfaceWrapper) SignupClubOwner(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SignupClubOwner(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SignupPlayer operation middleware
func (siw *ServerInterfaceWrapper) SignupPlayer(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SignupPlayer(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/end-abandoned-games", wrapper.EndAbandonedGames)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/game/{game_id}", wrapper.GetGame)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/generate-recent-statistics", wrapper.GenerateRecentStatistics)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login", wrapper.Login)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/refresh-token", wrapper.RefreshToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/signup-club-owner", wrapper.SignupClubOwner)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/signup-player", wrapper.SignupPlayer)
	})

	return r
}

type ErrorResponseSchemaJSONResponse Error

type EndAbandonedGamesRequestObject struct {
}

type EndAbandonedGamesResponseObject interface {
	VisitEndAbandonedGamesResponse(w http.ResponseWriter) error
}

type EndAbandonedGames200Response struct {
}

func (response EndAbandonedGames200Response) VisitEndAbandonedGamesResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type EndAbandonedGamesdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response EndAbandonedGamesdefaultJSONResponse) VisitEndAbandonedGamesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetGameRequestObject struct {
	GameId string `json:"game_id"`
}

type GetGameResponseObject interface {
	VisitGetGameResponse(w http.ResponseWriter) error
}

type GetGame200JSONResponse struct {
	Game       Game           `json:"game"`
	Statistics *GameStatistic `json:"statistics,omitempty"`
	Steps      []GameStep     `json:"steps"`
}

func (response GetGame200JSONResponse) VisitGetGameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGamedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetGamedefaultJSONResponse) VisitGetGameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GenerateRecentStatisticsRequestObject struct {
}

type GenerateRecentStatisticsResponseObject interface {
	VisitGenerateRecentStatisticsResponse(w http.ResponseWriter) error
}

type GenerateRecentStatistics200Response struct {
}

func (response GenerateRecentStatistics200Response) VisitGenerateRecentStatisticsResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GenerateRecentStatisticsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GenerateRecentStatisticsdefaultJSONResponse) VisitGenerateRecentStatisticsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200JSONResponse LoginResponseSchema

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LogindefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response LogindefaultJSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RefreshTokenRequestObject struct {
}

type RefreshTokenResponseObject interface {
	VisitRefreshTokenResponse(w http.ResponseWriter) error
}

type RefreshToken200JSONResponse RefreshTokenResponseSchema

func (response RefreshToken200JSONResponse) VisitRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RefreshTokendefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response RefreshTokendefaultJSONResponse) VisitRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignupClubOwnerRequestObject struct {
	Body *SignupClubOwnerJSONRequestBody
}

type SignupClubOwnerResponseObject interface {
	VisitSignupClubOwnerResponse(w http.ResponseWriter) error
}

type SignupClubOwner201Response struct {
}

func (response SignupClubOwner201Response) VisitSignupClubOwnerResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type SignupClubOwnerdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SignupClubOwnerdefaultJSONResponse) VisitSignupClubOwnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignupPlayerRequestObject struct {
	Body *SignupPlayerJSONRequestBody
}

type SignupPlayerResponseObject interface {
	VisitSignupPlayerResponse(w http.ResponseWriter) error
}

type SignupPlayer201Response struct {
}

func (response SignupPlayer201Response) VisitSignupPlayerResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type SignupPlayerdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SignupPlayerdefaultJSONResponse) VisitSignupPlayerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// End games which are abandoned after a time
	// (GET /end-abandoned-games)
	EndAbandonedGames(ctx context.Context, request EndAbandonedGamesRequestObject) (EndAbandonedGamesResponseObject, error)
	// Get game and steps given id
	// (GET /game/{game_id})
	GetGame(ctx context.Context, request GetGameRequestObject) (GetGameResponseObject, error)
	// Generate statistics for players that has latest game in timespan
	// (GET /generate-recent-statistics)
	GenerateRecentStatistics(ctx context.Context, request GenerateRecentStatisticsRequestObject) (GenerateRecentStatisticsResponseObject, error)

	// (POST /login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)

	// (POST /refresh-token)
	RefreshToken(ctx context.Context, request RefreshTokenRequestObject) (RefreshTokenResponseObject, error)

	// (POST /signup-club-owner)
	SignupClubOwner(ctx context.Context, request SignupClubOwnerRequestObject) (SignupClubOwnerResponseObject, error)

	// (POST /signup-player)
	SignupPlayer(ctx context.Context, request SignupPlayerRequestObject) (SignupPlayerResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// EndAbandonedGames operation middleware
func (sh *strictHandler) EndAbandonedGames(w http.ResponseWriter, r *http.Request) {
	var request EndAbandonedGamesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.EndAbandonedGames(ctx, request.(EndAbandonedGamesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EndAbandonedGames")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(EndAbandonedGamesResponseObject); ok {
		if err := validResponse.VisitEndAbandonedGamesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGame operation middleware
func (sh *strictHandler) GetGame(w http.ResponseWriter, r *http.Request, gameId string) {
	var request GetGameRequestObject

	request.GameId = gameId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetGame(ctx, request.(GetGameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGame")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetGameResponseObject); ok {
		if err := validResponse.VisitGetGameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GenerateRecentStatistics operation middleware
func (sh *strictHandler) GenerateRecentStatistics(w http.ResponseWriter, r *http.Request) {
	var request GenerateRecentStatisticsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GenerateRecentStatistics(ctx, request.(GenerateRecentStatisticsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GenerateRecentStatistics")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GenerateRecentStatisticsResponseObject); ok {
		if err := validResponse.VisitGenerateRecentStatisticsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Login operation middleware
func (sh *strictHandler) Login(w http.ResponseWriter, r *http.Request) {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RefreshToken operation middleware
func (sh *strictHandler) RefreshToken(w http.ResponseWriter, r *http.Request) {
	var request RefreshTokenRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RefreshToken(ctx, request.(RefreshTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RefreshToken")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RefreshTokenResponseObject); ok {
		if err := validResponse.VisitRefreshTokenResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignupClubOwner operation middleware
func (sh *strictHandler) SignupClubOwner(w http.ResponseWriter, r *http.Request) {
	var request SignupClubOwnerRequestObject

	var body SignupClubOwnerJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SignupClubOwner(ctx, request.(SignupClubOwnerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignupClubOwner")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SignupClubOwnerResponseObject); ok {
		if err := validResponse.VisitSignupClubOwnerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignupPlayer operation middleware
func (sh *strictHandler) SignupPlayer(w http.ResponseWriter, r *http.Request) {
	var request SignupPlayerRequestObject

	var body SignupPlayerJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SignupPlayer(ctx, request.(SignupPlayerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignupPlayer")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SignupPlayerResponseObject); ok {
		if err := validResponse.VisitSignupPlayerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
