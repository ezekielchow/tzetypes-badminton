// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	models "common/models"
	context "context"

	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v5"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, tx, firebaseUID, email, accountTier
func (_m *UserRepository) CreateUser(ctx context.Context, tx *pgx.Tx, firebaseUID string, email string, accountTier string) (models.User, error) {
	ret := _m.Called(ctx, tx, firebaseUID, email, accountTier)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pgx.Tx, string, string, string) (models.User, error)); ok {
		return rf(ctx, tx, firebaseUID, email, accountTier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pgx.Tx, string, string, string) models.User); ok {
		r0 = rf(ctx, tx, firebaseUID, email, accountTier)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pgx.Tx, string, string, string) error); ok {
		r1 = rf(ctx, tx, firebaseUID, email, accountTier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserWithEmail provides a mock function with given fields: ctx, tx, email
func (_m *UserRepository) FindUserWithEmail(ctx context.Context, tx *pgx.Tx, email string) (models.User, error) {
	ret := _m.Called(ctx, tx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindUserWithEmail")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pgx.Tx, string) (models.User, error)); ok {
		return rf(ctx, tx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pgx.Tx, string) models.User); ok {
		r0 = rf(ctx, tx, email)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pgx.Tx, string) error); ok {
		r1 = rf(ctx, tx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserWithID provides a mock function with given fields: ctx, tx, id
func (_m *UserRepository) FindUserWithID(ctx context.Context, tx *pgx.Tx, id string) (models.User, error) {
	ret := _m.Called(ctx, tx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindUserWithID")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pgx.Tx, string) (models.User, error)); ok {
		return rf(ctx, tx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pgx.Tx, string) models.User); ok {
		r0 = rf(ctx, tx, id)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pgx.Tx, string) error); ok {
		r1 = rf(ctx, tx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
