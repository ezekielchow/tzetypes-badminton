// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	models "common/models"
	context "context"

	mock "github.com/stretchr/testify/mock"

	oapiprivate "common/oapiprivate"

	oapipublic "common/oapipublic"
)

// UserServiceInterface is an autogenerated mock type for the UserServiceInterface type
type UserServiceInterface struct {
	mock.Mock
}

// GetLoggedInUser provides a mock function with given fields: ctx, input, user
func (_m *UserServiceInterface) GetLoggedInUser(ctx context.Context, input oapiprivate.GetLoggedInUserRequestObject, user models.User) (oapiprivate.GetLoggedInUserResponseObject, error) {
	ret := _m.Called(ctx, input, user)

	if len(ret) == 0 {
		panic("no return value specified for GetLoggedInUser")
	}

	var r0 oapiprivate.GetLoggedInUserResponseObject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, oapiprivate.GetLoggedInUserRequestObject, models.User) (oapiprivate.GetLoggedInUserResponseObject, error)); ok {
		return rf(ctx, input, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, oapiprivate.GetLoggedInUserRequestObject, models.User) oapiprivate.GetLoggedInUserResponseObject); ok {
		r0 = rf(ctx, input, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oapiprivate.GetLoggedInUserResponseObject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, oapiprivate.GetLoggedInUserRequestObject, models.User) error); ok {
		r1 = rf(ctx, input, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, input
func (_m *UserServiceInterface) Login(ctx context.Context, input oapipublic.LoginRequestObject) (oapipublic.LoginResponseObject, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 oapipublic.LoginResponseObject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, oapipublic.LoginRequestObject) (oapipublic.LoginResponseObject, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, oapipublic.LoginRequestObject) oapipublic.LoginResponseObject); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oapipublic.LoginResponseObject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, oapipublic.LoginRequestObject) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: ctx, input, session
func (_m *UserServiceInterface) Logout(ctx context.Context, input oapiprivate.LogoutRequestObject, session models.Session) (oapiprivate.LogoutResponseObject, error) {
	ret := _m.Called(ctx, input, session)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 oapiprivate.LogoutResponseObject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, oapiprivate.LogoutRequestObject, models.Session) (oapiprivate.LogoutResponseObject, error)); ok {
		return rf(ctx, input, session)
	}
	if rf, ok := ret.Get(0).(func(context.Context, oapiprivate.LogoutRequestObject, models.Session) oapiprivate.LogoutResponseObject); ok {
		r0 = rf(ctx, input, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oapiprivate.LogoutResponseObject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, oapiprivate.LogoutRequestObject, models.Session) error); ok {
		r1 = rf(ctx, input, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshToken provides a mock function with given fields: ctx, input
func (_m *UserServiceInterface) RefreshToken(ctx context.Context, input oapipublic.RefreshTokenRequestObject) (oapipublic.RefreshTokenResponseObject, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 oapipublic.RefreshTokenResponseObject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, oapipublic.RefreshTokenRequestObject) (oapipublic.RefreshTokenResponseObject, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, oapipublic.RefreshTokenRequestObject) oapipublic.RefreshTokenResponseObject); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oapipublic.RefreshTokenResponseObject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, oapipublic.RefreshTokenRequestObject) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Signup provides a mock function with given fields: ctx, input
func (_m *UserServiceInterface) Signup(ctx context.Context, input oapipublic.SignupRequestObject) (oapipublic.SignupResponseObject, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Signup")
	}

	var r0 oapipublic.SignupResponseObject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, oapipublic.SignupRequestObject) (oapipublic.SignupResponseObject, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, oapipublic.SignupRequestObject) oapipublic.SignupResponseObject); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oapipublic.SignupResponseObject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, oapipublic.SignupRequestObject) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserServiceInterface creates a new instance of UserServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserServiceInterface {
	mock := &UserServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
