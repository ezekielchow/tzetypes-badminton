// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	models "common/models"
	context "context"

	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v5"

	time "time"
)

// SessionRepository is an autogenerated mock type for the SessionRepository type
type SessionRepository struct {
	mock.Mock
}

// CreateSession provides a mock function with given fields: ctx, tx, userID, sessionTokenExpiresAt, refreshTokenExpiresAt
func (_m *SessionRepository) CreateSession(ctx context.Context, tx *pgx.Tx, userID string, sessionTokenExpiresAt time.Time, refreshTokenExpiresAt time.Time) (models.Session, error) {
	ret := _m.Called(ctx, tx, userID, sessionTokenExpiresAt, refreshTokenExpiresAt)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 models.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pgx.Tx, string, time.Time, time.Time) (models.Session, error)); ok {
		return rf(ctx, tx, userID, sessionTokenExpiresAt, refreshTokenExpiresAt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pgx.Tx, string, time.Time, time.Time) models.Session); ok {
		r0 = rf(ctx, tx, userID, sessionTokenExpiresAt, refreshTokenExpiresAt)
	} else {
		r0 = ret.Get(0).(models.Session)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pgx.Tx, string, time.Time, time.Time) error); ok {
		r1 = rf(ctx, tx, userID, sessionTokenExpiresAt, refreshTokenExpiresAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSession provides a mock function with given fields: ctx, tx, sessionID
func (_m *SessionRepository) DeleteSession(ctx context.Context, tx *pgx.Tx, sessionID string) error {
	ret := _m.Called(ctx, tx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pgx.Tx, string) error); ok {
		r0 = rf(ctx, tx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindSessionToRefreshAccessToken provides a mock function with given fields: ctx, tx, refreshToken
func (_m *SessionRepository) FindSessionToRefreshAccessToken(ctx context.Context, tx *pgx.Tx, refreshToken string) (models.Session, error) {
	ret := _m.Called(ctx, tx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for FindSessionToRefreshAccessToken")
	}

	var r0 models.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pgx.Tx, string) (models.Session, error)); ok {
		return rf(ctx, tx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pgx.Tx, string) models.Session); ok {
		r0 = rf(ctx, tx, refreshToken)
	} else {
		r0 = ret.Get(0).(models.Session)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pgx.Tx, string) error); ok {
		r1 = rf(ctx, tx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSessionWithSessionID provides a mock function with given fields: ctx, tx, sessionID
func (_m *SessionRepository) FindSessionWithSessionID(ctx context.Context, tx *pgx.Tx, sessionID string) (models.Session, error) {
	ret := _m.Called(ctx, tx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for FindSessionWithSessionID")
	}

	var r0 models.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pgx.Tx, string) (models.Session, error)); ok {
		return rf(ctx, tx, sessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pgx.Tx, string) models.Session); ok {
		r0 = rf(ctx, tx, sessionID)
	} else {
		r0 = ret.Get(0).(models.Session)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pgx.Tx, string) error); ok {
		r1 = rf(ctx, tx, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSessionWithRefreshToken provides a mock function with given fields: ctx, tx, refreshToken, sessionTokenExpiresAt
func (_m *SessionRepository) UpdateSessionWithRefreshToken(ctx context.Context, tx *pgx.Tx, refreshToken string, sessionTokenExpiresAt time.Time) (models.Session, error) {
	ret := _m.Called(ctx, tx, refreshToken, sessionTokenExpiresAt)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSessionWithRefreshToken")
	}

	var r0 models.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pgx.Tx, string, time.Time) (models.Session, error)); ok {
		return rf(ctx, tx, refreshToken, sessionTokenExpiresAt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pgx.Tx, string, time.Time) models.Session); ok {
		r0 = rf(ctx, tx, refreshToken, sessionTokenExpiresAt)
	} else {
		r0 = ret.Get(0).(models.Session)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pgx.Tx, string, time.Time) error); ok {
		r1 = rf(ctx, tx, refreshToken, sessionTokenExpiresAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSessionRepository creates a new instance of SessionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionRepository {
	mock := &SessionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
