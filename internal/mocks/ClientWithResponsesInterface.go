// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	oapipublic "common/oapipublic"
)

// ClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type ClientWithResponsesInterface struct {
	mock.Mock
}

// GetGameWithResponse provides a mock function with given fields: ctx, gameId, reqEditors
func (_m *ClientWithResponsesInterface) GetGameWithResponse(ctx context.Context, gameId string, reqEditors ...oapipublic.RequestEditorFn) (*oapipublic.GetGameResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, gameId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGameWithResponse")
	}

	var r0 *oapipublic.GetGameResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapipublic.RequestEditorFn) (*oapipublic.GetGameResponse, error)); ok {
		return rf(ctx, gameId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapipublic.RequestEditorFn) *oapipublic.GetGameResponse); ok {
		r0 = rf(ctx, gameId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapipublic.GetGameResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapipublic.RequestEditorFn) error); ok {
		r1 = rf(ctx, gameId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...oapipublic.RequestEditorFn) (*oapipublic.LoginResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LoginWithBodyWithResponse")
	}

	var r0 *oapipublic.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapipublic.RequestEditorFn) (*oapipublic.LoginResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapipublic.RequestEditorFn) *oapipublic.LoginResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapipublic.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...oapipublic.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) LoginWithResponse(ctx context.Context, body oapipublic.LoginJSONRequestBody, reqEditors ...oapipublic.RequestEditorFn) (*oapipublic.LoginResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LoginWithResponse")
	}

	var r0 *oapipublic.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, oapipublic.LoginJSONRequestBody, ...oapipublic.RequestEditorFn) (*oapipublic.LoginResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, oapipublic.LoginJSONRequestBody, ...oapipublic.RequestEditorFn) *oapipublic.LoginResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapipublic.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, oapipublic.LoginJSONRequestBody, ...oapipublic.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshTokenWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) RefreshTokenWithResponse(ctx context.Context, reqEditors ...oapipublic.RequestEditorFn) (*oapipublic.RefreshTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RefreshTokenWithResponse")
	}

	var r0 *oapipublic.RefreshTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...oapipublic.RequestEditorFn) (*oapipublic.RefreshTokenResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...oapipublic.RequestEditorFn) *oapipublic.RefreshTokenResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapipublic.RefreshTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...oapipublic.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignupClubOwnerWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) SignupClubOwnerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...oapipublic.RequestEditorFn) (*oapipublic.SignupClubOwnerResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SignupClubOwnerWithBodyWithResponse")
	}

	var r0 *oapipublic.SignupClubOwnerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapipublic.RequestEditorFn) (*oapipublic.SignupClubOwnerResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapipublic.RequestEditorFn) *oapipublic.SignupClubOwnerResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapipublic.SignupClubOwnerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...oapipublic.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignupClubOwnerWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) SignupClubOwnerWithResponse(ctx context.Context, body oapipublic.SignupClubOwnerJSONRequestBody, reqEditors ...oapipublic.RequestEditorFn) (*oapipublic.SignupClubOwnerResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SignupClubOwnerWithResponse")
	}

	var r0 *oapipublic.SignupClubOwnerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, oapipublic.SignupClubOwnerJSONRequestBody, ...oapipublic.RequestEditorFn) (*oapipublic.SignupClubOwnerResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, oapipublic.SignupClubOwnerJSONRequestBody, ...oapipublic.RequestEditorFn) *oapipublic.SignupClubOwnerResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapipublic.SignupClubOwnerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, oapipublic.SignupClubOwnerJSONRequestBody, ...oapipublic.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignupPlayerWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) SignupPlayerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...oapipublic.RequestEditorFn) (*oapipublic.SignupPlayerResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SignupPlayerWithBodyWithResponse")
	}

	var r0 *oapipublic.SignupPlayerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapipublic.RequestEditorFn) (*oapipublic.SignupPlayerResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapipublic.RequestEditorFn) *oapipublic.SignupPlayerResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapipublic.SignupPlayerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...oapipublic.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignupPlayerWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) SignupPlayerWithResponse(ctx context.Context, body oapipublic.SignupPlayerJSONRequestBody, reqEditors ...oapipublic.RequestEditorFn) (*oapipublic.SignupPlayerResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SignupPlayerWithResponse")
	}

	var r0 *oapipublic.SignupPlayerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, oapipublic.SignupPlayerJSONRequestBody, ...oapipublic.RequestEditorFn) (*oapipublic.SignupPlayerResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, oapipublic.SignupPlayerJSONRequestBody, ...oapipublic.RequestEditorFn) *oapipublic.SignupPlayerResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapipublic.SignupPlayerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, oapipublic.SignupPlayerJSONRequestBody, ...oapipublic.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientWithResponsesInterface creates a new instance of ClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientWithResponsesInterface {
	mock := &ClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
