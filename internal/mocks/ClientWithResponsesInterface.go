// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	oapipublic "common/oapipublic"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type ClientWithResponsesInterface struct {
	mock.Mock
}

// EndAbandonedGamesWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) EndAbandonedGamesWithResponse(ctx context.Context, reqEditors ...oapipublic.RequestEditorFn) (*oapipublic.EndAbandonedGamesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EndAbandonedGamesWithResponse")
	}

	var r0 *oapipublic.EndAbandonedGamesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...oapipublic.RequestEditorFn) (*oapipublic.EndAbandonedGamesResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...oapipublic.RequestEditorFn) *oapipublic.EndAbandonedGamesResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapipublic.EndAbandonedGamesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...oapipublic.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateRecentStatisticsWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) GenerateRecentStatisticsWithResponse(ctx context.Context, reqEditors ...oapipublic.RequestEditorFn) (*oapipublic.GenerateRecentStatisticsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GenerateRecentStatisticsWithResponse")
	}

	var r0 *oapipublic.GenerateRecentStatisticsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...oapipublic.RequestEditorFn) (*oapipublic.GenerateRecentStatisticsResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...oapipublic.RequestEditorFn) *oapipublic.GenerateRecentStatisticsResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapipublic.GenerateRecentStatisticsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...oapipublic.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGameWithResponse provides a mock function with given fields: ctx, gameId, reqEditors
func (_m *ClientWithResponsesInterface) GetGameWithResponse(ctx context.Context, gameId string, reqEditors ...oapipublic.RequestEditorFn) (*oapipublic.GetGameResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, gameId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGameWithResponse")
	}

	var r0 *oapipublic.GetGameResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapipublic.RequestEditorFn) (*oapipublic.GetGameResponse, error)); ok {
		return rf(ctx, gameId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapipublic.RequestEditorFn) *oapipublic.GetGameResponse); ok {
		r0 = rf(ctx, gameId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapipublic.GetGameResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapipublic.RequestEditorFn) error); ok {
		r1 = rf(ctx, gameId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientWithResponsesInterface creates a new instance of ClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientWithResponsesInterface {
	mock := &ClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
