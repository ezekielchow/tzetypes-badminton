// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	oapiprivate "common/oapiprivate"
)

// ClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type ClientWithResponsesInterface struct {
	mock.Mock
}

// AddGameStepsWithBodyWithResponse provides a mock function with given fields: ctx, gameId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) AddGameStepsWithBodyWithResponse(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...oapiprivate.RequestEditorFn) (*oapiprivate.AddGameStepsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, gameId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddGameStepsWithBodyWithResponse")
	}

	var r0 *oapiprivate.AddGameStepsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapiprivate.RequestEditorFn) (*oapiprivate.AddGameStepsResponse, error)); ok {
		return rf(ctx, gameId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapiprivate.RequestEditorFn) *oapiprivate.AddGameStepsResponse); ok {
		r0 = rf(ctx, gameId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiprivate.AddGameStepsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapiprivate.RequestEditorFn) error); ok {
		r1 = rf(ctx, gameId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddGameStepsWithResponse provides a mock function with given fields: ctx, gameId, body, reqEditors
func (_m *ClientWithResponsesInterface) AddGameStepsWithResponse(ctx context.Context, gameId string, body oapiprivate.AddGameStepsJSONRequestBody, reqEditors ...oapiprivate.RequestEditorFn) (*oapiprivate.AddGameStepsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, gameId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddGameStepsWithResponse")
	}

	var r0 *oapiprivate.AddGameStepsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, oapiprivate.AddGameStepsJSONRequestBody, ...oapiprivate.RequestEditorFn) (*oapiprivate.AddGameStepsResponse, error)); ok {
		return rf(ctx, gameId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, oapiprivate.AddGameStepsJSONRequestBody, ...oapiprivate.RequestEditorFn) *oapiprivate.AddGameStepsResponse); ok {
		r0 = rf(ctx, gameId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiprivate.AddGameStepsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, oapiprivate.AddGameStepsJSONRequestBody, ...oapiprivate.RequestEditorFn) error); ok {
		r1 = rf(ctx, gameId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddPlayerWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) AddPlayerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...oapiprivate.RequestEditorFn) (*oapiprivate.AddPlayerResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddPlayerWithBodyWithResponse")
	}

	var r0 *oapiprivate.AddPlayerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapiprivate.RequestEditorFn) (*oapiprivate.AddPlayerResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapiprivate.RequestEditorFn) *oapiprivate.AddPlayerResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiprivate.AddPlayerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...oapiprivate.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddPlayerWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) AddPlayerWithResponse(ctx context.Context, body oapiprivate.AddPlayerJSONRequestBody, reqEditors ...oapiprivate.RequestEditorFn) (*oapiprivate.AddPlayerResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddPlayerWithResponse")
	}

	var r0 *oapiprivate.AddPlayerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, oapiprivate.AddPlayerJSONRequestBody, ...oapiprivate.RequestEditorFn) (*oapiprivate.AddPlayerResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, oapiprivate.AddPlayerJSONRequestBody, ...oapiprivate.RequestEditorFn) *oapiprivate.AddPlayerResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiprivate.AddPlayerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, oapiprivate.AddPlayerJSONRequestBody, ...oapiprivate.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrUpdateGameHistoryWithBodyWithResponse provides a mock function with given fields: ctx, gameId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateOrUpdateGameHistoryWithBodyWithResponse(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...oapiprivate.RequestEditorFn) (*oapiprivate.CreateOrUpdateGameHistoryResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, gameId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateGameHistoryWithBodyWithResponse")
	}

	var r0 *oapiprivate.CreateOrUpdateGameHistoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapiprivate.RequestEditorFn) (*oapiprivate.CreateOrUpdateGameHistoryResponse, error)); ok {
		return rf(ctx, gameId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapiprivate.RequestEditorFn) *oapiprivate.CreateOrUpdateGameHistoryResponse); ok {
		r0 = rf(ctx, gameId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiprivate.CreateOrUpdateGameHistoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapiprivate.RequestEditorFn) error); ok {
		r1 = rf(ctx, gameId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrUpdateGameHistoryWithResponse provides a mock function with given fields: ctx, gameId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateOrUpdateGameHistoryWithResponse(ctx context.Context, gameId string, body oapiprivate.CreateOrUpdateGameHistoryJSONRequestBody, reqEditors ...oapiprivate.RequestEditorFn) (*oapiprivate.CreateOrUpdateGameHistoryResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, gameId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateGameHistoryWithResponse")
	}

	var r0 *oapiprivate.CreateOrUpdateGameHistoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, oapiprivate.CreateOrUpdateGameHistoryJSONRequestBody, ...oapiprivate.RequestEditorFn) (*oapiprivate.CreateOrUpdateGameHistoryResponse, error)); ok {
		return rf(ctx, gameId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, oapiprivate.CreateOrUpdateGameHistoryJSONRequestBody, ...oapiprivate.RequestEditorFn) *oapiprivate.CreateOrUpdateGameHistoryResponse); ok {
		r0 = rf(ctx, gameId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiprivate.CreateOrUpdateGameHistoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, oapiprivate.CreateOrUpdateGameHistoryJSONRequestBody, ...oapiprivate.RequestEditorFn) error); ok {
		r1 = rf(ctx, gameId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DashboardWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) DashboardWithResponse(ctx context.Context, reqEditors ...oapiprivate.RequestEditorFn) (*oapiprivate.DashboardResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DashboardWithResponse")
	}

	var r0 *oapiprivate.DashboardResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...oapiprivate.RequestEditorFn) (*oapiprivate.DashboardResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...oapiprivate.RequestEditorFn) *oapiprivate.DashboardResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiprivate.DashboardResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...oapiprivate.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGameStepsWithBodyWithResponse provides a mock function with given fields: ctx, gameId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) DeleteGameStepsWithBodyWithResponse(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...oapiprivate.RequestEditorFn) (*oapiprivate.DeleteGameStepsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, gameId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGameStepsWithBodyWithResponse")
	}

	var r0 *oapiprivate.DeleteGameStepsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapiprivate.RequestEditorFn) (*oapiprivate.DeleteGameStepsResponse, error)); ok {
		return rf(ctx, gameId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapiprivate.RequestEditorFn) *oapiprivate.DeleteGameStepsResponse); ok {
		r0 = rf(ctx, gameId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiprivate.DeleteGameStepsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapiprivate.RequestEditorFn) error); ok {
		r1 = rf(ctx, gameId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGameStepsWithResponse provides a mock function with given fields: ctx, gameId, body, reqEditors
func (_m *ClientWithResponsesInterface) DeleteGameStepsWithResponse(ctx context.Context, gameId string, body oapiprivate.DeleteGameStepsJSONRequestBody, reqEditors ...oapiprivate.RequestEditorFn) (*oapiprivate.DeleteGameStepsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, gameId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGameStepsWithResponse")
	}

	var r0 *oapiprivate.DeleteGameStepsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, oapiprivate.DeleteGameStepsJSONRequestBody, ...oapiprivate.RequestEditorFn) (*oapiprivate.DeleteGameStepsResponse, error)); ok {
		return rf(ctx, gameId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, oapiprivate.DeleteGameStepsJSONRequestBody, ...oapiprivate.RequestEditorFn) *oapiprivate.DeleteGameStepsResponse); ok {
		r0 = rf(ctx, gameId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiprivate.DeleteGameStepsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, oapiprivate.DeleteGameStepsJSONRequestBody, ...oapiprivate.RequestEditorFn) error); ok {
		r1 = rf(ctx, gameId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EndGameWithBodyWithResponse provides a mock function with given fields: ctx, gameId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) EndGameWithBodyWithResponse(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...oapiprivate.RequestEditorFn) (*oapiprivate.EndGameResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, gameId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EndGameWithBodyWithResponse")
	}

	var r0 *oapiprivate.EndGameResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapiprivate.RequestEditorFn) (*oapiprivate.EndGameResponse, error)); ok {
		return rf(ctx, gameId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapiprivate.RequestEditorFn) *oapiprivate.EndGameResponse); ok {
		r0 = rf(ctx, gameId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiprivate.EndGameResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapiprivate.RequestEditorFn) error); ok {
		r1 = rf(ctx, gameId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EndGameWithResponse provides a mock function with given fields: ctx, gameId, body, reqEditors
func (_m *ClientWithResponsesInterface) EndGameWithResponse(ctx context.Context, gameId string, body oapiprivate.EndGameJSONRequestBody, reqEditors ...oapiprivate.RequestEditorFn) (*oapiprivate.EndGameResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, gameId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EndGameWithResponse")
	}

	var r0 *oapiprivate.EndGameResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, oapiprivate.EndGameJSONRequestBody, ...oapiprivate.RequestEditorFn) (*oapiprivate.EndGameResponse, error)); ok {
		return rf(ctx, gameId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, oapiprivate.EndGameJSONRequestBody, ...oapiprivate.RequestEditorFn) *oapiprivate.EndGameResponse); ok {
		r0 = rf(ctx, gameId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiprivate.EndGameResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, oapiprivate.EndGameJSONRequestBody, ...oapiprivate.RequestEditorFn) error); ok {
		r1 = rf(ctx, gameId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGameHistoryWithResponse provides a mock function with given fields: ctx, gameId, reqEditors
func (_m *ClientWithResponsesInterface) GetGameHistoryWithResponse(ctx context.Context, gameId string, reqEditors ...oapiprivate.RequestEditorFn) (*oapiprivate.GetGameHistoryResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, gameId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGameHistoryWithResponse")
	}

	var r0 *oapiprivate.GetGameHistoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapiprivate.RequestEditorFn) (*oapiprivate.GetGameHistoryResponse, error)); ok {
		return rf(ctx, gameId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapiprivate.RequestEditorFn) *oapiprivate.GetGameHistoryResponse); ok {
		r0 = rf(ctx, gameId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiprivate.GetGameHistoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapiprivate.RequestEditorFn) error); ok {
		r1 = rf(ctx, gameId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoggedInUserWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) GetLoggedInUserWithResponse(ctx context.Context, reqEditors ...oapiprivate.RequestEditorFn) (*oapiprivate.GetLoggedInUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLoggedInUserWithResponse")
	}

	var r0 *oapiprivate.GetLoggedInUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...oapiprivate.RequestEditorFn) (*oapiprivate.GetLoggedInUserResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...oapiprivate.RequestEditorFn) *oapiprivate.GetLoggedInUserResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiprivate.GetLoggedInUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...oapiprivate.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlayerWithIdWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) GetPlayerWithIdWithResponse(ctx context.Context, id string, reqEditors ...oapiprivate.RequestEditorFn) (*oapiprivate.GetPlayerWithIdResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPlayerWithIdWithResponse")
	}

	var r0 *oapiprivate.GetPlayerWithIdResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapiprivate.RequestEditorFn) (*oapiprivate.GetPlayerWithIdResponse, error)); ok {
		return rf(ctx, id, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapiprivate.RequestEditorFn) *oapiprivate.GetPlayerWithIdResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiprivate.GetPlayerWithIdResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapiprivate.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecentStatisticsWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) GetRecentStatisticsWithResponse(ctx context.Context, reqEditors ...oapiprivate.RequestEditorFn) (*oapiprivate.GetRecentStatisticsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRecentStatisticsWithResponse")
	}

	var r0 *oapiprivate.GetRecentStatisticsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...oapiprivate.RequestEditorFn) (*oapiprivate.GetRecentStatisticsResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...oapiprivate.RequestEditorFn) *oapiprivate.GetRecentStatisticsResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiprivate.GetRecentStatisticsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...oapiprivate.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPlayersWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) ListPlayersWithResponse(ctx context.Context, params *oapiprivate.ListPlayersParams, reqEditors ...oapiprivate.RequestEditorFn) (*oapiprivate.ListPlayersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPlayersWithResponse")
	}

	var r0 *oapiprivate.ListPlayersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *oapiprivate.ListPlayersParams, ...oapiprivate.RequestEditorFn) (*oapiprivate.ListPlayersResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *oapiprivate.ListPlayersParams, ...oapiprivate.RequestEditorFn) *oapiprivate.ListPlayersResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiprivate.ListPlayersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *oapiprivate.ListPlayersParams, ...oapiprivate.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogoutWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) LogoutWithResponse(ctx context.Context, reqEditors ...oapiprivate.RequestEditorFn) (*oapiprivate.LogoutResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LogoutWithResponse")
	}

	var r0 *oapiprivate.LogoutResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...oapiprivate.RequestEditorFn) (*oapiprivate.LogoutResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...oapiprivate.RequestEditorFn) *oapiprivate.LogoutResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiprivate.LogoutResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...oapiprivate.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartGameWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) StartGameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...oapiprivate.RequestEditorFn) (*oapiprivate.StartGameResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartGameWithBodyWithResponse")
	}

	var r0 *oapiprivate.StartGameResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapiprivate.RequestEditorFn) (*oapiprivate.StartGameResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapiprivate.RequestEditorFn) *oapiprivate.StartGameResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiprivate.StartGameResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...oapiprivate.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartGameWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) StartGameWithResponse(ctx context.Context, body oapiprivate.StartGameJSONRequestBody, reqEditors ...oapiprivate.RequestEditorFn) (*oapiprivate.StartGameResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartGameWithResponse")
	}

	var r0 *oapiprivate.StartGameResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, oapiprivate.StartGameJSONRequestBody, ...oapiprivate.RequestEditorFn) (*oapiprivate.StartGameResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, oapiprivate.StartGameJSONRequestBody, ...oapiprivate.RequestEditorFn) *oapiprivate.StartGameResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiprivate.StartGameResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, oapiprivate.StartGameJSONRequestBody, ...oapiprivate.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePlayerWithIdWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdatePlayerWithIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapiprivate.RequestEditorFn) (*oapiprivate.UpdatePlayerWithIdResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePlayerWithIdWithBodyWithResponse")
	}

	var r0 *oapiprivate.UpdatePlayerWithIdResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapiprivate.RequestEditorFn) (*oapiprivate.UpdatePlayerWithIdResponse, error)); ok {
		return rf(ctx, id, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapiprivate.RequestEditorFn) *oapiprivate.UpdatePlayerWithIdResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiprivate.UpdatePlayerWithIdResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapiprivate.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePlayerWithIdWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdatePlayerWithIdWithResponse(ctx context.Context, id string, body oapiprivate.UpdatePlayerWithIdJSONRequestBody, reqEditors ...oapiprivate.RequestEditorFn) (*oapiprivate.UpdatePlayerWithIdResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePlayerWithIdWithResponse")
	}

	var r0 *oapiprivate.UpdatePlayerWithIdResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, oapiprivate.UpdatePlayerWithIdJSONRequestBody, ...oapiprivate.RequestEditorFn) (*oapiprivate.UpdatePlayerWithIdResponse, error)); ok {
		return rf(ctx, id, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, oapiprivate.UpdatePlayerWithIdJSONRequestBody, ...oapiprivate.RequestEditorFn) *oapiprivate.UpdatePlayerWithIdResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiprivate.UpdatePlayerWithIdResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, oapiprivate.UpdatePlayerWithIdJSONRequestBody, ...oapiprivate.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientWithResponsesInterface creates a new instance of ClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientWithResponsesInterface {
	mock := &ClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
