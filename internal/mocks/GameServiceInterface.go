// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "common/models"

	oapiprivate "common/oapiprivate"
)

// GameServiceInterface is an autogenerated mock type for the GameServiceInterface type
type GameServiceInterface struct {
	mock.Mock
}

// StartGame provides a mock function with given fields: ctx, input, user
func (_m *GameServiceInterface) StartGame(ctx context.Context, input oapiprivate.StartGameRequestObject, user models.User) (oapiprivate.StartGameResponseObject, error) {
	ret := _m.Called(ctx, input, user)

	if len(ret) == 0 {
		panic("no return value specified for StartGame")
	}

	var r0 oapiprivate.StartGameResponseObject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, oapiprivate.StartGameRequestObject, models.User) (oapiprivate.StartGameResponseObject, error)); ok {
		return rf(ctx, input, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, oapiprivate.StartGameRequestObject, models.User) oapiprivate.StartGameResponseObject); ok {
		r0 = rf(ctx, input, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oapiprivate.StartGameResponseObject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, oapiprivate.StartGameRequestObject, models.User) error); ok {
		r1 = rf(ctx, input, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGameServiceInterface creates a new instance of GameServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGameServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *GameServiceInterface {
	mock := &GameServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
